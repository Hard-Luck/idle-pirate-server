generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./db/dev.db"
}

model User {
  id        String     @id @default(cuid())
  username  String?    @unique
  name      String?
  Stats     Stats?
  createdAt DateTime   @default(now())
  UserShip  UserShip[]
}

model Stats {
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  level      Int    @default(1)
  gold       Int    @default(0)
  rum        Int    @default(0)
  experience Int    @default(0)

  @@unique([userId])
}

model Item {
  id                   String                 @id @default(cuid())
  name                 String
  description          String
  value                Int                    @default(0)
  type                 String
  QuestRequirementItem QuestRequirementItem[]
  QuestRewardItem      QuestRewardItem[]
}

model Quest {
  id               String             @id @default(cuid())
  name             String
  description      String
  lengthInSeconds  Int                @default(10)
  QuestRequirement QuestRequirement[]
  QuestReward      QuestReward[]
}

model QuestReward {
  id              String            @id @default(cuid())
  questId         String
  quest           Quest             @relation(fields: [questId], references: [id], onDelete: Cascade)
  gold            Int               @default(0)
  rum             Int               @default(0)
  experience      Int               @default(0)
  QuestRewardItem QuestRewardItem[]
}

model QuestRewardItem {
  id            String      @id @default(cuid())
  itemId        String
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quantity      Int
  questRewardId String
  questReward   QuestReward @relation(fields: [questRewardId], references: [id])
}

model QuestRequirement {
  id                   String                 @id @default(cuid())
  questId              String
  quest                Quest                  @relation(fields: [questId], references: [id], onDelete: Cascade)
  level                Int                    @default(0)
  gold                 Int                    @default(0)
  rum                  Int                    @default(0)
  QuestRequirementItem QuestRequirementItem[]
}

model QuestRequirementItem {
  id                 String           @id @default(cuid())
  itemId             String
  item               Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quantity           Int
  questRequirementId String
  questRequirement   QuestRequirement @relation(fields: [questRequirementId], references: [id])
}

model Ship {
  id            String     @id @default(cuid())
  name          String
  description   String
  cost          Int
  requiredLevel Int
  attack        Int
  capacity      Int
  isDefault     Boolean    @default(false)
  maxGuns       Int
  UserShip      UserShip[]
}

model UserShip {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipId String
  ship   Ship   @relation(fields: [shipId], references: [id], onDelete: Cascade)
  guns   Int    @default(0)
  health Int    @default(100)
}
