generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String          @id @default(cuid())
  username      String          @unique
  name          String?
  Stats         Stats?
  QuestProgress QuestProgress[]
  createdAt     DateTime        @default(now())
  UserShip      UserShip[]
}

model Stats {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  level  Int    @default(1)
  gold   Int    @default(0)

  @@unique([userId])
}

model Quest {
  id             String          @id @default(cuid())
  name           String
  description    String
  successText    String
  requiredLevel  Int             @default(1)
  reward         Int
  difficulty     Int             @default(1)
  isActive       Boolean         @default(false)
  numberOfStages Int             @default(1)
  QuestProgress  QuestProgress[]
  QuestStage     QuestStage[]
}

model QuestProgress {
  id              String    @id @default(cuid())
  completed       Boolean   @default(false)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  stagesCompleted Int       @default(0)
  questId         String
  quest           Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuestStage {
  id               String             @id @default(cuid())
  stageNumber      Int
  text             String
  completed        Boolean            @default(false)
  questId          String
  quest            Quest              @relation(fields: [questId], references: [id], onDelete: Cascade)
  QuestStageOption QuestStageOption[]
}

model QuestStageOption {
  id           String     @id @default(cuid())
  description  String
  scores       Int
  questStageId String
  questStage   QuestStage @relation(fields: [questStageId], references: [id], onDelete: Cascade)
}

model Ship {
  id          String     @id @default(cuid())
  name        String
  description String
  cost        Int
  level       Int
  attack      Int
  capacity    Int
  isDefault   Boolean    @default(false)
  UserShip    UserShip[]
}

model UserShip {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipId String
  ship   Ship   @relation(fields: [shipId], references: [id], onDelete: Cascade)
}
